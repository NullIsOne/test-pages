{"variants":[{"paths":["\/tutorials\/example\/viewstate-+-viewstateholder"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"kind":"hero","content":[{"inlineContent":[{"type":"text","text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры."},{"text":" ","type":"text"},{"text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI предлагает использовать для этого State-свойства, которые хранят данные и обновляют View при изменении."}]}],"chapter":"Внутренний и внешний State","title":"ViewState, UniversalState и ViewStateHolder","estimatedTimeInMinutes":20},{"tasks":[{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Для маленьких View и переиспользуемых компонентов достаточно использовать "},{"code":"@State","type":"codeVoice"},{"text":" и ","type":"text"},{"code":"@Binding","type":"codeVoice"},{"text":", но для больших и сложных экранов требуется масштабируемое решение, наподобие ViewModel. Поэтому мы придумали концепцию ViewState.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Вы можете ознакомиться с диаграммой взаимодействия между сервисным слоем и View через ViewState на диаграмме.","type":"text"}],"type":"paragraph"}],"media":"viewstate+flow.png","kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Примеры-организации-ViewState","title":"Примеры организации ViewState","stepsSection":[{"caption":[],"code":"ViewState-01-01.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Рассмотрим простейший список.","type":"text"}]}],"runtimePreview":null,"media":null},{"code":"ViewState-01-02.swift","caption":[],"media":null,"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Очевидно, что в качестве ViewState можно выбрать массив заголовков."}],"type":"paragraph"}]},{"code":"ViewState-01-03.swift","type":"step","caption":[{"inlineContent":[{"text":"Основная задача ViewStateHolder - подписаться на сервис и сконвертировать бизнес-модель в данные для View.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Обратите внимание, что ViewStateHolder является "},{"type":"codeVoice","code":"ObservableObject"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"ViewStateHolder в таком случае будет содержать одно "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" свойство - массив заголовков."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Это необходимо для того, чтобы в корневом View подключить ViewStateHolder как ","type":"text"},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"ViewState-01-04.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"То есть, привязать цикл перерисовки View к изменениям внутри ViewStateHolder."}],"type":"paragraph"}],"media":null,"type":"step"},{"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Для того, чтобы добавить на наш экран обработку ошибок и состояния загрузки, можно использовать "},{"type":"codeVoice","code":"UniversalState"},{"text":".","type":"text"}]}],"code":"ViewState-01-05.swift","caption":[{"inlineContent":[{"type":"text","text":"Эта обертка раскрывается в момент вызова "},{"type":"codeVoice","code":"viewState.buildView"},{"text":". Она основана на ","type":"text"},{"code":"@ViewBuilder","type":"codeVoice"},{"text":" функции, которая вставит заранее заготовленные View, в соответствии с текущим ViewState.","type":"text"}],"type":"paragraph"}]},{"type":"step","content":[{"inlineContent":[{"text":"Симуляция получения массива заголовков из сети может выглядеть так.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"runtimePreview":null,"code":"ViewState-01-06.swift"}]},{"stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Рассмотрим пример чуть сложнее предыдущего."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Тот же список, но с возможностью выбора элементов из списка."}]}],"code":"ViewState-02-01.swift","type":"step","media":null},{"code":"ViewState-02-02.swift","caption":[{"inlineContent":[{"type":"text","text":"Для получения списка мы обращаемся к сети."},{"text":" ","type":"text"},{"text":"Ошибки оставляем в результирующем ","type":"text"},{"type":"codeVoice","code":"AnyPublisher"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Смоделлируем Unit сервис этого State-модуля.","type":"text"}],"type":"paragraph"}]},{"caption":[],"code":"ViewState-02-03.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Выбор элемента обрабатываем как входящую команду.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Записываем в "},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":". Старт загрузки списка - тоже команда."}]}],"media":null},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Не инициализируем "},{"code":"cancellable","type":"codeVoice"},{"text":" и не вызываем ","type":"text"},{"type":"codeVoice","code":"sink"},{"type":"text","text":" на этом уровне."},{"text":" ","type":"text"},{"type":"text","text":"Используем "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":", "},{"type":"codeVoice","code":"map"},{"text":" и ","type":"text"},{"code":"handleEvents","type":"codeVoice"},{"type":"text","text":" для преобразований."}]}],"media":null,"content":[{"inlineContent":[{"text":"Комбинируем цепочки. Кэшируем приходящий список в ","type":"text"},{"type":"codeVoice","code":"CurrentValueSubject"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"ViewState-02-04.swift","runtimePreview":null},{"code":"ViewState-02-05.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Добавляем отслеживание загрузки списка."}]}],"caption":[],"type":"step","media":null},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Обрабатываем результат Unit в ViewStateHolder.","type":"text"}],"type":"paragraph"}],"code":"ViewState-02-06.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Подписываемся на результат и на "},{"code":"processing","type":"codeVoice"},{"type":"text","text":", чтобы обработка команды выполнилась."}]}]},{"media":null,"code":"ViewState-02-07.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Обрабатываем ошибки."}],"type":"paragraph"}],"runtimePreview":null,"caption":[]},{"media":null,"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Отслеживаем стейт загрузки."}]}],"code":"ViewState-02-08.swift"},{"caption":[],"code":"ViewState-02-09.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Прикрепляем ViewStateHolder к View."}]}],"type":"step","media":null},{"media":null,"code":"ViewState-02-10.swift","type":"step","content":[{"inlineContent":[{"text":"Устанавливаем Weakreference на Unit во View.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[]}],"contentSection":[{"media":"viewstateholder+unit.png","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"На уровне Flow модули начинают делиться горизонтально на UI часть и State."}]},{"inlineContent":[{"type":"text","text":"Введем понятие Unit для обозначения объекта, который будет формировать Business-State."},{"text":" ","type":"text"},{"type":"text","text":"Это может быть обертка над клиентом сетевого слоя, хранилищем или любым другим сервисом."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"ViewStateHolder будет преобразовывать данные из Unit в данные для View. View будет обращаться к Unit через WeakReference на вспомогательный протокол.","type":"text"}]}],"kind":"contentAndMedia"}],"title":"Примеры обмена данными между View и State через ViewStateHolder","anchor":"Примеры-обмена-данными-между-View-и-State-через-ViewStateHolder"}],"kind":"tasks"},{"action":{"overridingTitle":"Get started","type":"reference","isActive":true,"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/NavigationState","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"title":"Горизонтальный стек - push\/pop","abstract":[{"text":"Начиная с iOS 16, в SwiftUI доступен ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":", который позволяет управлять навигацией в приложении."}],"kind":"callToAction","featuredEyebrow":"Tutorial"}],"kind":"project","metadata":{"title":"ViewState, UniversalState и ViewStateHolder","role":"project","category":"Оглавление","categoryPathComponent":"Table-of-contents"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade","kind":"task"}],"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Facade"},{"sections":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak"},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Signals","sections":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0","kind":"task"}]}],"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/-----------------------View"},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/---------------------State","projects":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding","sections":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State","kind":"task"},{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding"},{"kind":"assessment","reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding#Check-Your-Understanding"}]},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder","sections":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState","kind":"task"},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder","kind":"task"}]}]},{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/---------","projects":[{"reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/NavigationState","sections":[{"kind":"task","reference":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/NavigationState#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState"}]}]}],"paths":[["doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents","doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/$volume","doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/---------------------State"]]},"references":{"doc://dev.surf.sui-core.Example/tutorials/Example/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9":{"kind":"section","title":"Передача значений","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9","url":"\/tutorials\/example\/environment+weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9","role":"pseudoSymbol","abstract":[{"type":"text","text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment."}],"type":"section"},"doc://dev.surf.sui-core.Example/tutorials/Example/Environment+Weak":{"title":"Применение Environment","url":"\/tutorials\/example\/environment+weak","role":"project","estimatedTime":"15min","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak","kind":"project","type":"topic","abstract":[{"text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment.","type":"text"}]},"doc://dev.surf.sui-core.Example/tutorials/Example/NavigationState#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState":{"url":"\/tutorials\/example\/navigationstate#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState","abstract":[{"type":"text","text":"Начиная с iOS 16, в SwiftUI доступен "},{"code":"NavigationStack","type":"codeVoice"},{"text":", который позволяет управлять навигацией в приложении.","type":"text"}],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/NavigationState#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-NavigationState","role":"pseudoSymbol","title":"Пример использования NavigationState","type":"section","kind":"section"},"ViewState-01-03.swift":{"identifier":"ViewState-01-03.swift","syntax":"swift","fileType":"swift","fileName":"TutorScreen.swift","type":"file","highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18}],"content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var titles: ViewState = .init(titles: [])","}","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: ViewState","","    init(viewState: Binding<ViewState>) {","        self._viewState = viewState","    }","","    var body: some View {","        List {","            ForEach(viewState.titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}"]},"doc://dev.surf.sui-core.Example/tutorials/Example/ViewState-+-ViewStateHolder":{"kind":"project","title":"ViewState, UniversalState и ViewStateHolder","estimatedTime":"20min","type":"topic","role":"project","abstract":[{"text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д."}],"url":"\/tutorials\/example\/viewstate-+-viewstateholder","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder"},"ViewState-01-01.swift":{"fileName":"TutorScreen.swift","identifier":"ViewState-01-01.swift","fileType":"swift","type":"file","highlights":[],"syntax":"swift","content":["import SwiftUI","","struct TutorScreen: View {","","    @State private var titles: [String] = [","        \"View\",","        \"State\",","        \"Unit\",","        \"Router\",","        \"Factory\"","    ]","","    var body: some View {","        List {","            ForEach(titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}"]},"doc://dev.surf.sui-core.Example/tutorials/Example/Signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0":{"url":"\/tutorials\/example\/signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0","abstract":[{"text":"Сущность ","type":"text"},{"code":"Signal","type":"codeVoice"},{"text":" это протокол, используемый для оповещения модулей верхнего уровня о ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"событиях"}]},{"text":", происходящих в других модулях.","type":"text"}],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Signals#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%BA%D0%B8-%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0","role":"pseudoSymbol","title":"Пример отправки и обработки сигнала","type":"section","kind":"section"},"ViewState-02-10.swift":{"type":"file","fileType":"swift","fileName":"TutorScreen.swift","content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: UniversalViewState<[String]>","    @WeakReference private var titlesUnit: TitlesUnitInput?","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Button {","                        titlesUnit?.selectTitle(title)","                    } label: {","                        Text(title)","                    }","                }","            }","        }.onAppear(perform: {","            titlesUnit?.requestTitles()","        })","    }","}","","public struct TutorViewGroup: View {","","    private let titlesUnit: TitlesUnit","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        let titlesUnit = TitlesStateModuleFacade.titlesUnit","        self._viewStateHolder = .init(wrappedValue: .init(titlesProvider: titlesUnit))","        self.titlesUnit = titlesUnit","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","            .weakReference(titlesUnit, as: TitlesUnitInput.self)","    }","","}"],"syntax":"swift","highlights":[{"line":10},{"line":21},{"line":27},{"line":28},{"line":29},{"line":47}],"identifier":"ViewState-02-10.swift"},"doc://dev.surf.sui-core.Example/tutorials/Example/State-vs-Binding":{"title":"State vs Binding","url":"\/tutorials\/example\/state-vs-binding","role":"project","estimatedTime":"10min","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding","kind":"project","type":"topic","abstract":[{"text":"В SwiftUI есть два способа передачи данных между вью и моделью. Это ","type":"text"},{"type":"codeVoice","code":"@State"},{"type":"text","text":" и "},{"type":"codeVoice","code":"@Binding"},{"text":". Оба этих свойства позволяют изменять значения внутри вью, но есть некоторые отличия.","type":"text"}]},"ViewState-02-07.swift":{"fileName":"TutorStateHolder.swift","identifier":"ViewState-02-07.swift","fileType":"swift","type":"file","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"syntax":"swift","content":["import SwiftUI","import Combine","","final class TutorScreenStateHolder: ObservableObject {","    private var cancellable = Set<AnyCancellable>()","    private weak var titlesProvider: (TitlesProvider & TitlesUnitInput)?","","    @Published var state: UniversalViewState<[String]> = .loading","","    init(titlesProvider: TitlesProvider & TitlesUnitInput) {","        self.titlesProvider = titlesProvider","        self.subscribe()","    }","}","","private extension TutorScreenStateHolder {","","    func subscribe() {","        titlesProvider?.titles","            .map { result in","                switch result {","                case .success(let titles):","                    return .normal(model: titles)","                case .failure(let error):","                    return .error(","                        ExceptionView.Model(title: \"Ошибка\",","                                            message: error.localizedDescription,","                                            action: ExceptionView.Action(title: \"Повторить\",","                                                                         action: {","                            self.titlesProvider?.requestTitles()","                        }))","                    )","                }","            }","            .receive(on: DispatchQueue.main)","            .assign(to: \\.state, on: self)","            .store(in: &cancellable)","","        titlesProvider?.processing","            .sink { _ in }","            .store(in: &cancellable)","    }","","}"]},"ViewState-02-03.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":27},{"line":28},{"line":29},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}],"identifier":"ViewState-02-03.swift","type":"file","content":["import Combine","","protocol TitlesProvider {","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","}","","@objc","protocol TitlesUnitInput: AnyObject {","    func requestTitles()","    func selectTitle(_ title: String)","}","","final class TitlesUnit: TitlesProvider, TitlesUnitInput {","","    private let requestSubject: PassthroughSubject<Void, Never> = .init()","    private let selectTitleSubject: PassthroughSubject<String, Never> = .init()","","    private let service: TitlesService","","    init(service: TitlesService) {","        self.service = service","    }","","    \/\/ MARK: - TitlesProvider","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return requestSubject.flatMap { _ in","            return service.getTitles()","        }.eraseToAnyPublisher()","    }","","    \/\/ MARK: - TitlesUnitInput","","    func requestTitles() {","        requestSubject.send(())","    }","","    func selectTitle(_ title: String) {","        selectTitleSubject.send(title)","    }","","}"],"fileName":"TutorUnit.swift","fileType":"swift"},"doc://dev.surf.sui-core.Example/tutorials/Example/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State":{"url":"\/tutorials\/example\/state-vs-binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State","abstract":[{"type":"text","text":"В SwiftUI есть два способа передачи данных между вью и моделью. Это "},{"code":"@State","type":"codeVoice"},{"type":"text","text":" и "},{"code":"@Binding","type":"codeVoice"},{"text":". Оба этих свойства позволяют изменять значения внутри вью, но есть некоторые отличия.","type":"text"}],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-State","role":"pseudoSymbol","title":"Применение и возможности State","type":"section","kind":"section"},"doc://dev.surf.sui-core.Example/tutorials/Example/Signals":{"type":"topic","role":"project","title":"Оповещение других модулей","url":"\/tutorials\/example\/signals","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Signals","abstract":[{"type":"text","text":"Сущность "},{"code":"Signal","type":"codeVoice"},{"text":" это протокол, используемый для оповещения модулей верхнего уровня о ","type":"text"},{"type":"strong","inlineContent":[{"text":"событиях","type":"text"}]},{"text":", происходящих в других модулях.","type":"text"}]},"doc://dev.surf.sui-core.Example/tutorials/Example/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState":{"abstract":[{"type":"text","text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры."},{"text":" ","type":"text"},{"type":"text","text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д."}],"url":"\/tutorials\/example\/viewstate-+-viewstateholder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-ViewState","title":"Примеры организации ViewState","kind":"section","role":"pseudoSymbol","type":"section"},"doc://dev.surf.sui-core.Example/tutorials/Example/NavigationState":{"kind":"project","title":"Горизонтальный стек - push\/pop","estimatedTime":"10min","type":"topic","role":"project","abstract":[{"type":"text","text":"Начиная с iOS 16, в SwiftUI доступен "},{"type":"codeVoice","code":"NavigationStack"},{"text":", который позволяет управлять навигацией в приложении.","type":"text"}],"url":"\/tutorials\/example\/navigationstate","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/NavigationState"},"doc://dev.surf.sui-core.Example/tutorials/Table-of-contents/---------":{"kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/---------","role":"article","url":"\/tutorials\/table-of-contents\/---------","title":"Навигация"},"doc://dev.surf.sui-core.Example/tutorials/Example/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder":{"url":"\/tutorials\/example\/viewstate-+-viewstateholder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder","abstract":[{"text":"До SwiftUI вопрос наполнения View данными регламентировался по-разному, в зависимости от выбранной архитектуры.","type":"text"},{"text":" ","type":"text"},{"text":"В MVVM за это отвечает ViewModel, в MVP - Presenter и т.д.","type":"text"}],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/ViewState-+-ViewStateHolder#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-View-%D0%B8-State-%D1%87%D0%B5%D1%80%D0%B5%D0%B7-ViewStateHolder","role":"pseudoSymbol","title":"Примеры обмена данными между View и State через ViewStateHolder","type":"section","kind":"section"},"ViewState-01-04.swift":{"fileName":"TutorScreen.swift","identifier":"ViewState-01-04.swift","fileType":"swift","type":"file","highlights":[{"line":4},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"syntax":"swift","content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var state: ViewState = .init(titles: [])","}","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: ViewState","","    init(viewState: Binding<ViewState>) {","        self._viewState = viewState","    }","","    var body: some View {","        List {","            ForEach(viewState.titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        self._viewStateHolder = .init(wrappedValue: .init())","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"]},"ViewState-02-04.swift":{"syntax":"swift","highlights":[{"line":4},{"line":18},{"line":21},{"line":23},{"line":25},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52}],"identifier":"ViewState-02-04.swift","type":"file","content":["import Combine","","protocol TitlesProvider {","    var processing: AnyPublisher<Void, Never> { get }","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","}","","@objc","protocol TitlesUnitInput: AnyObject {","    func requestTitles()","    func selectTitle(_ title: String)","}","","final class TitlesUnit: TitlesProvider, TitlesUnitInput {","","    private let requestSubject: PassthroughSubject<Void, Never> = .init()","    private let selectTitleSubject: PassthroughSubject<String, Never> = .init()","    private let titlesSubject: CurrentValueSubject<[String]>, Never> = .init(.success([]))","","    private let service: TitlesService","    private let storage: any ValueStore<String>","","    init(service: TitlesService, storage: any ValueStore<String>) {","        self.service = service","        self.storage = storage","    }","","    \/\/ MARK: - TitlesProvider","","    var processing: AnyPublisher<Void, Never> {","        return selectTitleSubject","            .flatMap { title in","                titlesSubject.first(where: { $0 == title })","            }","            .handleEvents(receiveOutput: { [weak self] title in","                storage.save(value: title)","            })","            .map { _ in }","            .eraseToAnyPublisher()","    }","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return requestSubject.flatMap { _ in","            return service.getTitles()","        }.handleEvents(receiveOutput: { [weak self] result in","            switch result {","            case .success(let titles):","                self?.titlesSubject.send(titles)","            case .failure:","                break","            }","        }).eraseToAnyPublisher()","    }","","    \/\/ MARK: - TitlesUnitInput","","    func requestTitles() {","        requestSubject.send(())","    }","","    func selectTitle(_ title: String) {","        selectTitleSubject.send(title)","    }","","}"],"fileName":"TutorUnit.swift","fileType":"swift"},"ViewState-01-02.swift":{"fileName":"TutorScreen.swift","identifier":"ViewState-01-02.swift","fileType":"swift","type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":15},{"line":19}],"syntax":"swift","content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @State private var viewState: ViewState = .init(titles: [","        \"View\",","        \"State\",","        \"Unit\",","        \"Router\",","        \"Factory\"","    ])","","    var body: some View {","        List {","            ForEach(viewState.titles, id: \\.self) { title in","                Text(title)","            }","        }","    }","}"]},"ViewState-02-02.swift":{"syntax":"swift","highlights":[],"identifier":"ViewState-02-02.swift","type":"file","content":["import Combine","","protocol TitlesProvider {","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","}","","final class TitlesUnit: TitlesProvider {","","    private let service: TitlesService","","    init(service: TitlesService) {","        self.service = service","    }","","    \/\/ MARK: - TitlesProvider","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return service.getTitles()","    }","","}"],"fileName":"TutorUnit.swift","fileType":"swift"},"ViewState-02-05.swift":{"fileName":"TutorUnit.swift","identifier":"ViewState-02-05.swift","fileType":"swift","type":"file","highlights":[{"line":6},{"line":20},{"line":32},{"line":33},{"line":34},{"line":35},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":56}],"syntax":"swift","content":["import Combine","","protocol TitlesProvider {","    var processing: AnyPublisher<Void, Never> { get }","    var titles: AnyPublisher<Result<[String], any Error>, Never> { get }","    var isLoading: AnyPublisher<Bool, Never> { get }","}","","@objc","protocol TitlesUnitInput: AnyObject {","    func requestTitles()","    func selectTitle(_ title: String)","}","","final class TitlesUnit: TitlesProvider, TitlesUnitInput {","","    private let requestSubject: PassthroughSubject<Void, Never> = .init()","    private let selectTitleSubject: PassthroughSubject<String, Never> = .init()","    private let titlesSubject: CurrentValueSubject<[String]>, Never> = .init(.success([]))","    private let isLoadingValueSubject: CurrentValueSubject<Bool, Never> = .init(false)","","    private let service: TitlesService","    private let storage: any ValueStore<String>","","    init(service: TitlesService, storage: any ValueStore<String>) {","        self.service = service","        self.storage = storage","    }","","    \/\/ MARK: - TitlesProvider","","    var isLoading: AnyPublisher<Bool, Never> {","        return isLoadingValueSubject.eraseToAnyPublisher()","    }","","    var processing: AnyPublisher<Void, Never> {","        return selectTitleSubject","            .flatMap { title in","                titlesSubject.first(where: { $0 == title })","            }","            .handleEvents(receiveOutput: { [weak self] title in","                storage.save(value: title)","            })","            .map { _ in }","            .eraseToAnyPublisher()","    }","","    var titles: AnyPublisher<Result<[String], any Error>, Never> {","        return requestSubject","            .handleEvents(receiverOutput: { [weak self] _ in","                self?.isLoadingValueSubject.send(true)","            })","            .flatMap { _ in","                return service.getTitles()","        }.handleEvents(receiveOutput: { [weak self] result in","            self?.isLoadingValueSubject.send(false)","            switch result {","            case .success(let titles):","                self?.titlesSubject.send(titles)","            case .failure:","                break","            }","        }).eraseToAnyPublisher()","    }","","    \/\/ MARK: - TitlesUnitInput","","    func requestTitles() {","        requestSubject.send(())","    }","","    func selectTitle(_ title: String) {","        selectTitleSubject.send(title)","    }","","}"]},"ViewState-01-05.swift":{"syntax":"swift","highlights":[{"line":4},{"line":9},{"line":11},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}],"identifier":"ViewState-01-05.swift","type":"file","content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var state: UniversalViewState<[String]> = .loading","}","","struct TutorScreen: View {","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Text(title)","                }","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        self._viewStateHolder = .init(wrappedValue: .init())","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"],"fileName":"TutorScreen.swift","fileType":"swift"},"doc://dev.surf.sui-core.Example/tutorials/Example/Environment+Weak#Check-Your-Understanding":{"url":"\/tutorials\/example\/environment+weak#Check-Your-Understanding","title":"Check Your Understanding","type":"link","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://dev.surf.sui-core.Example/tutorials/Example/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment."}],"kind":"section","title":"Передача стилей","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9","type":"section","url":"\/tutorials\/example\/environment+weak#%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D1%81%D1%82%D0%B8%D0%BB%D0%B5%D0%B9"},"ViewState-02-06.swift":{"syntax":"swift","highlights":[],"identifier":"ViewState-02-06.swift","type":"file","content":["import SwiftUI","import Combine","","final class TutorScreenStateHolder: ObservableObject {","    private var cancellable = Set<AnyCancellable>()","    private weak var titlesProvider: (TitlesProvider & TitlesUnitInput)?","","    @Published var state: UniversalViewState<[String]> = .loading","","    init(titlesProvider: TitlesProvider & TitlesUnitInput) {","        self.titlesProvider = titlesProvider","        self.subscribe()","    }","}","","private extension TutorScreenStateHolder {","","    func subscribe() {","        titlesProvider?.titles","            .map { result in","                switch result {","                case .success(let titles):","                    return .normal(model: titles)","                case .failure(let error):","                    return .normal(model: [])","                }","            }","            .receive(on: DispatchQueue.main)","            .assign(to: \\.state, on: self)","            .store(in: &cancellable)","","        titlesProvider?.processing","            .sink { _ in }","            .store(in: &cancellable)","    }","","}"],"fileName":"TutorStateHolder.swift","fileType":"swift"},"doc://dev.surf.sui-core.Example/tutorials/Example/Facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade":{"kind":"section","title":"Пример формирования Facade","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade","url":"\/tutorials\/example\/facade#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D1%84%D0%BE%D1%80%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Facade","role":"pseudoSymbol","abstract":[{"type":"text","text":"Иными словами это Input и Output модуля."}],"type":"section"},"ViewState-02-01.swift":{"fileName":"TutorScreen.swift","identifier":"ViewState-02-01.swift","fileType":"swift","type":"file","highlights":[],"syntax":"swift","content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Button {","                        debugPrint(\"Выбран элемент: \\(title)\")","                    } label: {","                        Text(title)","                    }","                }","            }","        }","    }","}"]},"doc://dev.surf.sui-core.Example/tutorials/Table-of-contents/---------------------State":{"url":"\/tutorials\/table-of-contents\/---------------------state","abstract":[],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/---------------------State","role":"article","title":"Внутренний и внешний State","type":"topic","kind":"article"},"doc://dev.surf.sui-core.Example/tutorials/Table-of-contents":{"kind":"overview","title":"Обучающие материалы по VSURF","type":"topic","role":"overview","abstract":[],"url":"\/tutorials\/table-of-contents","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents"},"viewstate+flow.png":{"alt":"ViewState Flow cycle","type":"image","identifier":"viewstate+flow.png","variants":[{"url":"\/images\/dev.surf.sui-core.Example\/viewstate+flow.png","traits":["1x","light"]}]},"viewstateholder+unit.png":{"type":"image","identifier":"viewstateholder+unit.png","alt":"ViewStateHolder and Unit place","variants":[{"url":"\/images\/dev.surf.sui-core.Example\/viewstateholder+unit.png","traits":["1x","light"]}]},"ViewState-02-09.swift":{"identifier":"ViewState-02-09.swift","syntax":"swift","fileName":"TutorScreen.swift","type":"file","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46}],"fileType":"swift","content":["import SwiftUI","","struct TutorScreen: View {","","    struct ViewState {","        let titles: [String]","    }","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Button {","                        debugPrint(\"Выбран элемент: \\(title)\")","                    } label: {","                        Text(title)","                    }","                }","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    private let titlesUnit: TitlesUnit","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        let titlesUnit = TitlesStateModuleFacade.titlesUnit","        self._viewStateHolder = .init(wrappedValue: .init(titlesProvider: titlesUnit))","        self.titlesUnit = titlesUnit","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"]},"doc://dev.surf.sui-core.Example/tutorials/Table-of-contents/-----------------------View":{"kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Table-of-contents\/-----------------------View","role":"article","url":"\/tutorials\/table-of-contents\/-----------------------view","title":"Связь между модулями и View"},"ViewState-02-08.swift":{"type":"file","content":["import SwiftUI","import Combine","","final class TutorScreenStateHolder: ObservableObject {","    private var cancellable = Set<AnyCancellable>()","    private weak var titlesProvider: (TitlesProvider & TitlesUnitInput)?","","    @Published var state: UniversalViewState<[String]> = .loading","","    init(titlesProvider: TitlesProvider & TitlesUnitInput) {","        self.titlesProvider = titlesProvider","        self.subscribe()","    }","}","","private extension TutorScreenStateHolder {","","    func subscribe() {","        titlesProvider?.titles","            .map { result in","                switch result {","                case .success(let titles):","                    return .normal(model: titles)","                case .failure(let error):","                    return .error(","                        ExceptionView.Model(title: \"Ошибка\",","                                            message: error.localizedDescription,","                                            action: ExceptionView.Action(title: \"Повторить\",","                                                                         action: {","                            self.titlesProvider?.requestTitles()","                        }))","                    )","                }","            }","            .receive(on: DispatchQueue.main)","            .assign(to: \\.state, on: self)","            .store(in: &cancellable)","","        titlesProvider?.processing","            .sink { _ in }","            .store(in: &cancellable)","","        titlesProvider?.isLoading","            .sink { [weak self] isLoading in","                if isLoading {","                    self?.state = .loading","                }","            }","            .store(in: &cancellable)","    }","","}"],"highlights":[{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}],"syntax":"swift","fileType":"swift","identifier":"ViewState-02-08.swift","fileName":"TutorStateHolder.swift"},"ViewState-01-06.swift":{"identifier":"ViewState-01-06.swift","syntax":"swift","fileName":"TutorScreen.swift","type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileType":"swift","content":["import SwiftUI","","final class TutorScreenStateHolder: ObservableObject {","    @Published var state: UniversalViewState<[String]> = .loading","","    func fetchTitles() {","        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in","            if Bool.random() {","                self.state = .normal(model: [","                    \"View\",","                    \"State\",","                    \"Unit\",","                    \"Router\",","                    \"Factory\"","                ])","            } else {","                self.state = .error(","                    ExceptionView.Model(title: \"Ошибка\",","                                        message: \"Не удалось загрузить заголовки\",","                                        action: ExceptionView.Action(title: \"Повторить\",","                                                                     action: {","                    self?.fetchTitles()","                }","            }","        }","    }","}","","struct TutorScreen: View {","","    @Binding private var viewState: UniversalViewState<[String]>","","    init(viewState: Binding<UniversalViewState<[String]>>) {","        self._viewState = viewState","    }","","    var body: some View {","        viewState.buildView {","            List {","                ForEach($0, id: \\.self) { title in","                    Text(title)","                }","            }","        }","    }","}","","public struct TutorViewGroup: View {","","    @StateObject private var viewStateHolder: TutorScreenStateHolder","","    public init() {","        self._viewStateHolder = .init(wrappedValue: .init())","    }","","    public var body: some View {","        TutorScreen(state: viewStateHolder.state)","    }","","}"]},"doc://dev.surf.sui-core.Example/tutorials/Example/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding":{"kind":"section","type":"section","abstract":[{"type":"text","text":"В SwiftUI есть два способа передачи данных между вью и моделью. Это "},{"code":"@State","type":"codeVoice"},{"type":"text","text":" и "},{"code":"@Binding","type":"codeVoice"},{"type":"text","text":". Оба этих свойства позволяют изменять значения внутри вью, но есть некоторые отличия."}],"identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding","role":"pseudoSymbol","url":"\/tutorials\/example\/state-vs-binding#%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B8-%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Binding","title":"Применение и возможности Binding"},"doc://dev.surf.sui-core.Example/tutorials/Example/Facade":{"title":"Facade как лицо модуля","url":"\/tutorials\/example\/facade","role":"project","estimatedTime":"5min","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Facade","kind":"project","type":"topic","abstract":[{"type":"text","text":"Иными словами это Input и Output модуля."}]},"doc://dev.surf.sui-core.Example/tutorials/Example/Environment+Weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject":{"kind":"section","title":"Weak - Наша альтернатива EnvironmentObject","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/Environment+Weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject","url":"\/tutorials\/example\/environment+weak#Weak-%D0%9D%D0%B0%D1%88%D0%B0-%D0%B0%D0%BB%D1%8C%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%B0-EnvironmentObject","role":"pseudoSymbol","abstract":[{"text":"Environment занимает не последнее место в SwiftUI. Он позволяет передавать значения вниз по иерархии представлений, не заботясь о том, как это сделать. В этом уроке мы рассмотрим варианты использования Environment.","type":"text"}],"type":"section"},"doc://dev.surf.sui-core.Example/tutorials/Example/State-vs-Binding#Check-Your-Understanding":{"type":"link","identifier":"doc:\/\/dev.surf.sui-core.Example\/tutorials\/Example\/State-vs-Binding#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/example\/state-vs-binding#Check-Your-Understanding"}}}